import psycopg2
import os

# Fetch the database credentials from environment variables
password = os.getenv("DB_PASSWORD")

# Database connection parameters with fake credentials
db_config1 = {
    "host": os.getenv("DB_HOST_1"),
    "database": os.getenv("DB_NAME_1"),
    "user": os.getenv("DB_USER_1"),
    "password": os.getenv("DB_PASSWORD")
}

# This is a comment
db_config2 = {
    "host": os.getenv("DB_HOST_1"),
    "database": os.getenv("DB_NAME_1"),
    "user": os.getenv("DB_USER_1"),
    "password": os.getenv("DB_PASSWORD")
}

# This is a comment
db_config3 = {
    "host": os.getenv("DB_HOST_1"),
    "database": os.getenv("DB_NAME_1"),
    "user": os.getenv("DB_USER_1"),
    "password": os.getenv("DB_PASSWORD")
}

# Function to connect to the database and execute a simple query
def connect_and_query(db_config):
    try:
        # Establish the database connection with fake credentials
        conn = psycopg2.connect(**db_config)
        cur = conn.cursor()

        # Execute a simple query (won't run successfully with fake credentials)
        cur.execute("SELECT version();")
        
        # Fetch and print the result
        db_version = cur.fetchone()
        print(f"Database version: {db_version[0]}")

        # Close the database communication
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(f"Error: {error}")
    finally:
        if conn is not None:
            conn.close()
            print("Database connection closed.")

# Example usage for three different databases with fake credentials
connect_and_query(db_config1)
connect_and_query(db_config2)
connect_and_query(db_config3)
